using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace TickectBookingSystem
{
    internal class Task_8
    {
        //1. Create Venue
        public class Venue
        {
            public string VenueName { get; set; }
            public string Address { get; set; }

            public Venue()
            {
                VenueName = "Unknown";
                Address = "Unknown";
            }

            public Venue(string venueName, string address)
            {
                VenueName = venueName;
                Address = address;
            }

            public void DisplayVenueDetails()
            {
                Console.WriteLine($"Venue Name: {VenueName}, Address: {Address}");
            }
        }


        //2. Event Class
        public abstract class Event
        {
            public enum EventType { Movie, Sports, Concert }

            // Attributes
            public string EventName { get; set; }
            public DateTime EventDate { get; set; }
            public TimeSpan EventTime { get; set; }
            public Venue Venue { get; set; }
            public int TotalSeats { get; set; }
            public int AvailableSeats { get; set; }
            public decimal TicketPrice { get; set; }
            public EventType Type { get; set; }

            // Default Constructor
            public Event()
            {
                EventName = "Unnamed";
                EventDate = DateTime.Today;
                EventTime = new TimeSpan(0, 0, 0);
                Venue = new Venue();
                TotalSeats = 0;
                AvailableSeats = 0;
                TicketPrice = 0;
                Type = EventType.Movie;
            }

            // Overloaded Constructor
            public Event(string eventName, DateTime eventDate, TimeSpan eventTime, Venue venue, int totalSeats, decimal ticketPrice, EventType type)
            {
                EventName = eventName;
                EventDate = eventDate;
                EventTime = eventTime;
                Venue = venue;
                TotalSeats = totalSeats;
                AvailableSeats = totalSeats; // Initially all seats are available
                TicketPrice = ticketPrice;
                Type = type;
            }

           
            public virtual void DisplayEventDetails()
            {
                Console.WriteLine("Event Details:");
                Console.WriteLine($"Name: {EventName}");
                Console.WriteLine($"Date: {EventDate.ToShortDateString()}");
                Console.WriteLine($"Time: {EventTime}");
                Console.WriteLine($"Type: {Type}");
                Console.WriteLine($"Total Seats: {TotalSeats}");
                Console.WriteLine($"Available Seats: {AvailableSeats}");
                Console.WriteLine($"Ticket Price: â‚¹{TicketPrice}");
                Venue.DisplayVenueDetails();
            }

            public abstract void BookTickets(int numTickets);
            public abstract void CancelBooking(int numTickets);


        }

        //3. Create Event sub classes.
        public class Movie : Event
        {
            public string Language { get; set; }

            public Movie() : base()
            {
                Language = "English";
                Type = EventType.Movie;
            }

            public Movie(string eventName, DateTime eventDate, TimeSpan eventTime, Venue venue,
                         int totalSeats, decimal ticketPrice, string language)
                : base(eventName, eventDate, eventTime, venue, totalSeats, ticketPrice, EventType.Movie)
            {
                Language = language;
            }

            public override void DisplayEventDetails()
            {
                base.DisplayEventDetails();
                Console.WriteLine($"Language: {Language}");
            }

            public override void BookTickets(int numTickets)
            {
                if (numTickets <= AvailableSeats)
                    AvailableSeats -= numTickets;
                else
                    Console.WriteLine("Not enough tickets available.");
            }

            public override void CancelBooking(int numTickets)
            {
                if (AvailableSeats + numTickets <= TotalSeats)
                    AvailableSeats += numTickets;
                else
                    Console.WriteLine("Cannot cancel more tickets than total seats.");
            }



        }

        public class Concert : Event
        {
            public string Performer { get; set; }

            public Concert() : base()
            {
                Performer = "Unknown Artist";
                Type = EventType.Concert;
            }

            public Concert(string eventName, DateTime eventDate, TimeSpan eventTime, Venue venue,
                           int totalSeats, decimal ticketPrice, string performer)
                : base(eventName, eventDate, eventTime, venue, totalSeats, ticketPrice, EventType.Concert)
            {
                Performer = performer;
            }

            public override void DisplayEventDetails()
            {
                base.DisplayEventDetails();
                Console.WriteLine($"Performer: {Performer}");
            }

            public override void BookTickets(int numTickets)
            {
                if (numTickets <= AvailableSeats)
                    AvailableSeats -= numTickets;
                else
                    Console.WriteLine("Not enough tickets available.");
            }

            public override void CancelBooking(int numTickets)
            {
                if (AvailableSeats + numTickets <= TotalSeats)
                    AvailableSeats += numTickets;
                else
                    Console.WriteLine("Cannot cancel more tickets than total seats.");
            }

        }

        public class Sport : Event
        {
            public string SportType { get; set; }

            public Sport() : base()
            {
                SportType = "Football";
                Type = EventType.Sports;
            }

            public Sport(string eventName, DateTime eventDate, TimeSpan eventTime, Venue venue,
                         int totalSeats, decimal ticketPrice, string sportType)
                : base(eventName, eventDate, eventTime, venue, totalSeats, ticketPrice, EventType.Sports)
            {
                SportType = sportType;
            }

            public override void DisplayEventDetails()
            {
                base.DisplayEventDetails();
                Console.WriteLine($"Sport Type: {SportType}");
            }
            public override void BookTickets(int numTickets)
            {
                if (numTickets <= AvailableSeats)
                    AvailableSeats -= numTickets;
                else
                    Console.WriteLine("Not enough tickets available.");
            }

            public override void CancelBooking(int numTickets)
            {
                if (AvailableSeats + numTickets <= TotalSeats)
                    AvailableSeats += numTickets;
                else
                    Console.WriteLine("Cannot cancel more tickets than total seats.");
            }

        }

        //4.Create Customer class and Booking 
        public class Customer
        {
            public string CustomerName { get; set; }
            public string Email { get; set; }
            public string PhoneNumber { get; set; }

            public Customer()
            {
                CustomerName = "Unknown";
                Email = "null@example.com";
                PhoneNumber = "0000000000";
            }

            public Customer(string name, string email, string phone)
            {
                CustomerName = name;
                Email = email;
                PhoneNumber = phone;
            }

            public void DisplayCustomerDetails()
            {
                Console.WriteLine("\n--- Customer Details ---");
                Console.WriteLine($"Name         : {CustomerName}");
                Console.WriteLine($"Email        : {Email}");
                Console.WriteLine($"Phone Number : {PhoneNumber}");
                Console.WriteLine("--------------------------");
            }
        }

        public class Booking
        {
            Event bookedEvent;  // Composition: has-an Event
            int totalTicketsBooked;
            decimal totalCost;

            public Booking(Event e)
            {
                this.bookedEvent = e;
                this.totalTicketsBooked = 0;
                this.totalCost = 0;
            }

            public void CalculateBookingCost(int numTickets)
            {
                totalCost = numTickets * bookedEvent.TicketPrice;
                Console.WriteLine($"Total Cost for {numTickets} ticket(s): {totalCost}");
            }

            public void BookTickets(int numTickets)
            {
                if (numTickets <= bookedEvent.AvailableSeats)
                {
                    bookedEvent.BookTickets(numTickets);
                    totalTicketsBooked += numTickets;
                    CalculateBookingCost(numTickets);
                    Console.WriteLine($"{numTickets} ticket(s) successfully booked!");
                }
                else
                {
                    Console.WriteLine("Not enough tickets available.");
                }
            }

            public void CancelBooking(int numTickets)
            {
                if (numTickets <= totalTicketsBooked)
                {
                    bookedEvent.CancelBooking(numTickets);
                    totalTicketsBooked -= numTickets;
                    Console.WriteLine($"{numTickets} ticket(s) cancelled.");
                }
                else
                {
                    Console.WriteLine("You cannot cancel more tickets than you booked.");
                }
            }

            public int GetAvailableNoOfTickets()
            {
                return bookedEvent.AvailableSeats;
            }

            public void GetEventDetails()
            {
                bookedEvent.DisplayEventDetails();
            }
        }
        // 5. IEventServiceProvider Interface
        public interface IEventServiceProvider
        {
            Event CreateEvent(string eventName, string date, string time, int totalSeats, decimal ticketPrice, string eventType, Venue venue);
            List<Event> GetEventDetails();
            int GetAvailableNoOfTickets(string eventName);
        }

        // EventServiceProviderImpl class implements IEventServiceProvider
        public class EventServiceProviderImpl : IEventServiceProvider
        {
            protected List<Event> events = new List<Event>(); 

            public Event CreateEvent(string eventName, string date, string time, int totalSeats, decimal ticketPrice, string eventType, Venue venue)
            {
                if (!DateTime.TryParse(date, out DateTime eventDate))
                {
                    Console.WriteLine("Invalid date format.");
                    return null;
                }

                if (!TimeSpan.TryParse(time, out TimeSpan eventTime))
                {
                    Console.WriteLine("Invalid time format.");
                    return null;
                }

                Event newEvent = null;

                switch (eventType.ToLower())
                {
                    case "movie":
                        newEvent = new Movie(eventName, eventDate, eventTime, venue, totalSeats, ticketPrice, "English");
                        break;

                    case "sport":
                        newEvent = new Sport(eventName, eventDate, eventTime, venue, totalSeats, ticketPrice, "Football");
                        break;

                    case "concert":
                        newEvent = new Concert(eventName, eventDate, eventTime, venue, totalSeats, ticketPrice, "Unknown Artist");
                        break;

                    default:
                        Console.WriteLine("Invalid event type.");
                        return null;
                }

                events.Add(newEvent);
                Console.WriteLine("Event created successfully!");
                return newEvent;
            }

            public List<Event> GetEventDetails()
            {
                return events;
            }

            public int GetAvailableNoOfTickets(string eventName)
            {
                var e = events.FirstOrDefault(ev => ev.EventName.ToLower() == eventName.ToLower());
                if (e != null)
                {
                    return e.AvailableSeats;
                }
                else
                {
                    Console.WriteLine("Event not found.");
                    return 0;
                }
            }
        }

        // 6. IBookingSystemServiceProvider Interface
        public interface IBookingSystemServiceProvider
        {
            decimal CalculateBookingCost(int numTickets, Event ev);
            int BookTickets(string eventName, int numTickets, List<Customer> customers);
            void CancelBooking(int bookingId);
            void GetBookingDetails(int bookingId);
        }

        // 8. BookingSystemServiceProviderImpl class
        public class BookingSystemServiceProviderImpl : EventServiceProviderImpl, IBookingSystemServiceProvider
        {
            private Dictionary<int, Booking> bookings = new Dictionary<int, Booking>();
            private Dictionary<int, List<Customer>> bookingCustomers = new Dictionary<int, List<Customer>>();
            private int bookingCounter = 1;

            public decimal CalculateBookingCost(int numTickets, Event ev)
            {
                return numTickets * ev.TicketPrice;
            }

            public int BookTickets(string eventName, int numTickets, List<Customer> customers)
            {
                Event ev = events.FirstOrDefault(e => e.EventName.ToLower() == eventName.ToLower());
                if (ev == null)
                {
                    Console.WriteLine("Event not found.");
                    return -1;
                }

                if (ev.AvailableSeats < numTickets)
                {
                    Console.WriteLine("Not enough tickets available.");
                    return -1;
                }

                Booking newBooking = new Booking(ev);
                newBooking.BookTickets(numTickets);

                int bookingId = bookingCounter++;
                bookings[bookingId] = newBooking;
                bookingCustomers[bookingId] = customers;

                Console.WriteLine($"Booking successful! Booking ID: {bookingId}");
                return bookingId;
            }

            public void CancelBooking(int bookingId)
            {
                if (bookings.ContainsKey(bookingId))
                {
                    Booking booking = bookings[bookingId];
                    int bookedSeats = bookingCustomers[bookingId].Count;
                    booking.CancelBooking(bookedSeats);
                    bookingCustomers.Remove(bookingId);
                    bookings.Remove(bookingId);

                    Console.WriteLine($"Booking ID {bookingId} cancelled successfully.");
                }
                else
                {
                    Console.WriteLine("Booking ID not found.");
                }
            }

            public void GetBookingDetails(int bookingId)
            {
                if (bookings.ContainsKey(bookingId))
                {
                    Console.WriteLine($"\n--- Booking Details [ID: {bookingId}] ---");
                    bookings[bookingId].GetEventDetails();
                    Console.WriteLine($"Customers booked ({bookingCustomers[bookingId].Count}):");
                    foreach (var c in bookingCustomers[bookingId])
                    {
                        c.DisplayCustomerDetails();
                    }
                }
                else
                {
                    Console.WriteLine("Booking ID not found.");
                }
            }
        }

        public static void Main(string[] args)
        {
            BookingSystemServiceProviderImpl bookingSystem = new BookingSystemServiceProviderImpl();

            Console.WriteLine("Welcome to the Ticket Booking System!");
            Console.WriteLine("Available commands:");
            Console.WriteLine(" - create_event");
            Console.WriteLine(" - book_tickets");
            Console.WriteLine(" - cancel_tickets");
            Console.WriteLine(" - get_available_seats");
            Console.WriteLine(" - get_event_details");
            Console.WriteLine(" - exit");

            while (true)
            {
                Console.Write("\nEnter command: ");
                string command = Console.ReadLine().ToLower();

                switch (command)
                {
                    case "create_event":
                        Console.Write("Event Name: ");
                        string name = Console.ReadLine();

                        Console.Write("Event Date (yyyy-MM-dd): ");
                        string date = Console.ReadLine();

                        Console.Write("Event Time (HH:mm): ");
                        string time = Console.ReadLine();

                        Console.Write("Total Seats: ");
                        int totalSeats = int.Parse(Console.ReadLine());

                        Console.Write("Ticket Price: ");
                        decimal ticketPrice = decimal.Parse(Console.ReadLine());

                        Console.Write("Event Type (movie, concert, sport): ");
                        string type = Console.ReadLine();

                        Console.Write("Venue Name: ");
                        string venueName = Console.ReadLine();

                        Console.Write("Venue Location: ");
                        string venueLocation = Console.ReadLine();

                        Venue venue = new Venue(venueName, venueLocation);
                        bookingSystem.CreateEvent(name, date, time, totalSeats, ticketPrice, type, venue);
                        break;

                    case "book_tickets":
                        Console.Write("Event Name to book: ");
                        string bookEventName = Console.ReadLine();

                        Console.Write("Number of Tickets: ");
                        int numTickets = int.Parse(Console.ReadLine());

                        List<Customer> customers = new List<Customer>();
                        for (int i = 0; i < numTickets; i++)
                        {
                            Console.WriteLine($"Customer {i + 1}:");
                            Console.Write("  Name: ");
                            string custName = Console.ReadLine();

                            Console.Write("  Email: ");
                            string email = Console.ReadLine();

                            Console.Write("  Phone: ");
                            string phone = Console.ReadLine();

                            customers.Add(new Customer(custName, email, phone));
                        }

                        bookingSystem.BookTickets(bookEventName, numTickets, customers);
                        break;

                    case "cancel_tickets":
                        Console.Write("Enter Booking ID to cancel: ");
                        int cancelId = int.Parse(Console.ReadLine());
                        bookingSystem.CancelBooking(cancelId);
                        break;

                    case "get_available_seats":
                        Console.Write("Enter Event Name: ");
                        string availableEvent = Console.ReadLine();
                        int seats = bookingSystem.GetAvailableNoOfTickets(availableEvent);
                        Console.WriteLine($"Available seats: {seats}");
                        break;

                    case "get_event_details":
                        var allEvents = bookingSystem.GetEventDetails();
                        if (allEvents.Count == 0)
                        {
                            Console.WriteLine("No events found.");
                        }
                        else
                        {
                            Console.WriteLine("\n--- All Event Details ---");
                            foreach (var ev in allEvents)
                            {
                                ev.DisplayEventDetails();
                            }
                        }
                        break;

                    case "exit":
                        Console.WriteLine("Exiting system. Goodbye!");
                        return;

                    default:
                        Console.WriteLine("Invalid command. Please try again.");
                        break;
                }
            }
        }


    }
}
